<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>ES6基础</title>
    <url>/2021/06/12/ES6%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h2 id="ECMAScript-6-简介"><a href="#ECMAScript-6-简介" class="headerlink" title="ECMAScript 6 简介"></a>ECMAScript 6 简介</h2><ul>
<li>Javascript 三大组成部分<ul>
<li>ECMAScript</li>
<li>DOM 文档对象模型</li>
<li>BOM 浏览器对象模型</li>
</ul>
</li>
</ul>
<h2 id="ECMAScript-6"><a href="#ECMAScript-6" class="headerlink" title="ECMAScript 6"></a>ECMAScript 6</h2><h3 id="1-1-let-和-const"><a href="#1-1-let-和-const" class="headerlink" title="1.1 let 和 const"></a>1.1 let 和 const</h3><p>let 变量</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span>：</span><br><span class="line">  <span class="number">1.</span> <span class="keyword">var</span>可以重复声明</span><br><span class="line">  <span class="number">2.</span> 作用域：全局作用域和函数作用域</span><br><span class="line">  <span class="number">3.</span> 会进行预解析（变量提升）</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span></span><br><span class="line">  <span class="number">1.</span> 统一作用域下不能重复声明</span><br><span class="line">  <span class="number">2.</span> 作用域：全局作用域和块级作用域&#123;&#125;</span><br><span class="line">  <span class="number">3.</span> 不进行预解析</span><br></pre></td></tr></table></figure>

<p>const 常量</p>
<h3 id="1-2-解构赋值"><a href="#1-2-解构赋值" class="headerlink" title="1.2 解构赋值"></a>1.2 解构赋值</h3><p>对象解构赋值</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span> &#125;</span><br><span class="line"><span class="keyword">const</span> &#123; a, b &#125; = obj</span><br></pre></td></tr></table></figure>

<p>数组解构赋值</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>]</span><br><span class="line"><span class="keyword">const</span> [e, f] = arr</span><br></pre></td></tr></table></figure>

<p>字符串解构赋值</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> str = <span class="string">"abc"</span></span><br><span class="line"><span class="keyword">const</span> [e, f] = str</span><br><span class="line"><span class="built_in">console</span>.log(e, f) <span class="comment">// a, b</span></span><br></pre></td></tr></table></figure>

<h3 id="1-3-展开运算符"><a href="#1-3-展开运算符" class="headerlink" title="1.3 展开运算符"></a>1.3 展开运算符</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"><span class="keyword">const</span> arr2 = [<span class="string">"a"</span>, <span class="string">"b"</span>, ...arr, <span class="string">"c"</span>, <span class="string">"d"</span>]</span><br><span class="line"><span class="built_in">console</span>.log(arr2) <span class="comment">// ["a", "b", 1, 2, 3, 4, "c", "d"]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 剩余参数</span></span><br><span class="line"><span class="keyword">const</span> [a, b, ...c] = arr;</span><br><span class="line"><span class="built_in">console</span>.log(a, b, c) <span class="comment">// 1, 2, [3, 4]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 对象展开</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span> &#125;</span><br><span class="line"><span class="keyword">const</span> obj2 = &#123; ...obj, <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">4</span> &#125;</span><br><span class="line"><span class="built_in">console</span>.log(obj2)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 问题</span></span><br><span class="line"><span class="keyword">const</span> obj3 = obj <span class="comment">// 传址，会改变原来对象的属性值</span></span><br><span class="line">obj3.a = <span class="number">10</span></span><br><span class="line"><span class="built_in">console</span>.log(obj) <span class="comment">// &#123; a: 10, b: 2 &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 解决</span></span><br><span class="line"><span class="keyword">const</span> obj3 = &#123;...obj&#125;</span><br><span class="line">obj3.a = <span class="number">10</span></span><br><span class="line"><span class="built_in">console</span>.log(obj) <span class="comment">// &#123; a: 1, b: 2 &#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="1-4-Set对象"><a href="#1-4-Set对象" class="headerlink" title="1.4 Set对象"></a>1.4 Set对象</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 构造函数 用来构建某一类型的对象 - 对象的实例化</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">5</span>]</span><br><span class="line"><span class="keyword">let</span> s = <span class="keyword">new</span> <span class="built_in">Set</span>(arr)</span><br><span class="line"><span class="built_in">console</span>.log(s) </span><br><span class="line">arr = [...s]</span><br><span class="line"><span class="built_in">console</span>.log(arr) <span class="comment">// [1,2,3,4,5] 数组去重</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(s.size) <span class="comment">// size 数值的个数 =&gt; length</span></span><br><span class="line"></span><br><span class="line">s.clear() <span class="comment">// 清空所有值</span></span><br><span class="line"></span><br><span class="line">s.delete(<span class="number">4</span>) <span class="comment">// 删除掉某个值</span></span><br><span class="line"></span><br><span class="line">s.add(<span class="number">6</span>) <span class="comment">// 添加</span></span><br><span class="line"></span><br><span class="line">s.has() <span class="comment">// 查看是否包含某个值 返回 true or false</span></span><br></pre></td></tr></table></figure>

<h3 id="1-5-Map对象"><a href="#1-5-Map对象" class="headerlink" title="1.5 Map对象"></a>1.5 Map对象</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [</span><br><span class="line">  [<span class="string">"a"</span>, <span class="number">1</span>]</span><br><span class="line">  [<span class="string">"b"</span>, <span class="number">2</span>],</span><br><span class="line">  [<span class="string">"c: 3"</span>]</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>(arr)</span><br><span class="line"><span class="built_in">console</span>.log(m)</span><br><span class="line"></span><br><span class="line">m.clear()</span><br><span class="line"><span class="built_in">console</span>.log(m)</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span>(key) <span class="comment">// 删除某一项，返回true or false 删除成功或不成功</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">get</span>(key) // 获取某一项具体值</span><br><span class="line"></span><br><span class="line">has(key) // 是否包含某一项</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span>(key, value) // 设置一个值, <span class="keyword">set</span>("d", 4)</span><br></pre></td></tr></table></figure>

<h3 id="1-6-函数新增扩展"><a href="#1-6-函数新增扩展" class="headerlink" title="1.6 函数新增扩展"></a>1.6 函数新增扩展</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 箭头函数，没有不定参</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">let</span> fn = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">arguments</span>) <span class="comment">// arguments is not defined </span></span><br><span class="line">  &#125;</span><br><span class="line">  fn(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// rest参数</span></span><br><span class="line">  <span class="keyword">let</span> fn = <span class="function">(<span class="params">...arg</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(arg) <span class="comment">// 1,2,3</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  fn(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 箭头函数的this</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">document</span>.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>) <span class="comment">// document</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">document</span>.onclick = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>) <span class="comment">// window</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">document</span>.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> fn = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>) <span class="comment">// document</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      consoel.log(<span class="keyword">this</span>) <span class="comment">// window</span></span><br><span class="line">    &#125;</span><br><span class="line">    fn()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 箭头函数本身没有this, 调用箭头函数的this时， 指向是其声明时所在的作用域的this</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">let</span> fn;</span><br><span class="line">  <span class="keyword">let</span> fn2 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>) <span class="comment">// window</span></span><br><span class="line">    fn = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>) <span class="comment">// window</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  fn2 = fn2.bind(<span class="built_in">document</span>.body)</span><br><span class="line">  fn2()</span><br><span class="line">  fn()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 参数默认值</span></span><br><span class="line"><span class="keyword">let</span> fn = <span class="function">(<span class="params">a = <span class="number">1</span>, b = <span class="number">2</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(a * b)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-7-数组新增扩展"><a href="#1-7-数组新增扩展" class="headerlink" title="1.7 数组新增扩展"></a>1.7 数组新增扩展</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Array.form 类数组转成数组</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">let</span> lis = <span class="built_in">document</span>.querySelectorAll(<span class="string">"li"</span>)</span><br><span class="line">  <span class="keyword">let</span> arr = []</span><br><span class="line">  lis = <span class="built_in">Array</span>.from(lis, (item, index) =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(item, index, <span class="keyword">this</span>)</span><br><span class="line">    <span class="keyword">return</span> index;</span><br><span class="line">  &#125;, arr)</span><br><span class="line">  <span class="built_in">console</span>.log(lis)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Array.of(1,2,3,4,'a') 将参数转成一个数组</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Array.isArray(data) 检测是否是数组</span></span><br></pre></td></tr></table></figure>

<h3 id="1-8-find和findIndex"><a href="#1-8-find和findIndex" class="headerlink" title="1.8 find和findIndex"></a>1.8 find和findIndex</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// find 查找数组中满足要求的第一个元素的值，参数和forEach一致</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">  <span class="keyword">let</span> val = arr.find(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(item &gt; <span class="number">3</span>)&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="built_in">console</span>.log(val)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 简写</span></span><br><span class="line">  <span class="keyword">let</span> val = arr.find(<span class="function"><span class="params">item</span> =&gt;</span> item &gt; <span class="number">3</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// findIndex 返回索引</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">  <span class="keyword">let</span> index = arr.findIndex(<span class="function"><span class="params">item</span> =&gt;</span> item &gt; <span class="number">3</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-9-数组扁平化"><a href="#1-9-数组扁平化" class="headerlink" title="1.9 数组扁平化"></a>1.9 数组扁平化</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// flat 扁平化多维数组</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">let</span> arr = [</span><br><span class="line">    [<span class="string">"小明"</span>, <span class="number">18</span>],</span><br><span class="line">    [<span class="string">"小刚"</span>, <span class="number">18</span>],</span><br><span class="line">    [</span><br><span class="line">      [<span class="number">1</span>, </span><br><span class="line">          [<span class="number">3</span>, <span class="number">4</span>],</span><br><span class="line">          [<span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">          [</span><br><span class="line">            [<span class="number">7</span>],</span><br><span class="line">            [<span class="number">8</span>]</span><br><span class="line">          ]</span><br><span class="line">      ]</span><br><span class="line">    ]</span><br><span class="line">  ]</span><br><span class="line">  <span class="built_in">console</span>.log(arr.flat(<span class="number">3</span>))</span><br><span class="line">  <span class="built_in">console</span>.log(arr.flat(<span class="literal">Infinity</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// flatMap</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// fill 数组填充</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">let</span> arr = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">  arr.fill(<span class="string">"a"</span>, <span class="number">4</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(arr) <span class="comment">// [0, 1, 2, 3, 4, 'a']</span></span><br><span class="line">  arr.fill(<span class="string">"a"</span>, <span class="number">1</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(arr) <span class="comment">// [0, 'a', 'a', 'a', 'a']</span></span><br><span class="line">  arr.fill(<span class="string">"a"</span>, <span class="number">1</span>, <span class="number">3</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(arr) <span class="comment">// [0, 'a', 'a', 3, 4]</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// includes   indexOf</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">let</span> arr = [<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>]</span><br><span class="line">  <span class="built_in">console</span>.log(arr.includes(<span class="string">"b"</span>)) <span class="comment">// true</span></span><br><span class="line">  <span class="built_in">console</span>.log(arr.includes(<span class="string">"b"</span>, <span class="number">2</span>)) <span class="comment">// false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-0-字符串扩展方法"><a href="#2-0-字符串扩展方法" class="headerlink" title="2.0 字符串扩展方法"></a>2.0 字符串扩展方法</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// includes</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// startsWith</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">let</span> str = <span class="string">"hello world"</span></span><br><span class="line">  <span class="built_in">console</span>.log(str.startsWith(<span class="string">'hello'</span>)) <span class="comment">// true</span></span><br><span class="line">  <span class="built_in">console</span>.log(str.startsWith(<span class="string">'hello'</span>, <span class="number">4</span>)) <span class="comment">// false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// endsWith 同上</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// repeat</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">let</span> str = <span class="string">"a"</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(str.repeat(<span class="number">2</span>)) <span class="comment">// aa</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 模板字符串</span></span><br></pre></td></tr></table></figure>

<h3 id="2-1-对象新增基础"><a href="#2-1-对象新增基础" class="headerlink" title="2.1 对象新增基础"></a>2.1 对象新增基础</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 简洁表示法</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">let</span> a = <span class="number">0</span></span><br><span class="line">  <span class="keyword">let</span> b = <span class="number">1</span></span><br><span class="line">  <span class="keyword">let</span> obj = &#123;</span><br><span class="line">    a,</span><br><span class="line">    b,</span><br><span class="line">    c()&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"a"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 属性名表达式</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">let</span> name = <span class="string">"小明"</span>;</span><br><span class="line">  <span class="keyword">let</span> obj = &#123;</span><br><span class="line">    [name]: <span class="number">111</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(obj) <span class="comment">// &#123;小明: 111&#125;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对象合并</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">let</span> obj = &#123;</span><br><span class="line">    a: <span class="number">1</span>,</span><br><span class="line">    b: <span class="number">2</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> obj2 = &#123;</span><br><span class="line">    ...obj,</span><br><span class="line">    c: <span class="number">3</span>,</span><br><span class="line">    d: <span class="number">4</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(obj2)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">let</span> obj = &#123;</span><br><span class="line">    a: <span class="number">1</span>,</span><br><span class="line">    b: <span class="number">2</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> obj2 = &#123;</span><br><span class="line">    c: <span class="number">3</span>,</span><br><span class="line">    d: <span class="number">4</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">Object</span>.assign(obj2, obj) <span class="comment">// obj合并到obj2</span></span><br><span class="line">  <span class="built_in">console</span>.log(obj2) <span class="comment">// &#123; c: 3, d: 4, a: 1, b: 2 &#125;</span></span><br><span class="line"></span><br><span class="line">  obj2 = <span class="built_in">Object</span>.assign(&#123;&#125;, obj, obj2)</span><br><span class="line">  <span class="built_in">console</span>.log(obj2) <span class="comment">// &#123; a: 1, b: 2, c: 3, d: 4 &#125;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Object.is(value1, value2) 判断两个值是否相等 -&gt; ===</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(+<span class="number">0</span> === <span class="number">-0</span>) <span class="comment">// true</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">Object</span>.is(+<span class="number">0</span>, <span class="number">-0</span>)) <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">Object</span>.is(<span class="literal">NaN</span>, <span class="literal">NaN</span>)) <span class="comment">// true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-2-babel使用（javascript编译器）"><a href="#2-2-babel使用（javascript编译器）" class="headerlink" title="2.2 babel使用（javascript编译器）"></a>2.2 babel使用（javascript编译器）</h3>]]></content>
  </entry>
  <entry>
    <title>Vue原理</title>
    <url>/2021/08/29/Vue%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<h2 id="Vue-响应式原理"><a href="#Vue-响应式原理" class="headerlink" title="Vue 响应式原理"></a>Vue 响应式原理</h2><p>Vue中的三个核心类：</p>
<ol>
<li>Observer: 给对象的属性添加getter和setter, 用于<strong>依赖收集</strong>和<strong>派发更新</strong></li>
<li>Dep: 用于收集当前响应式对象的依赖关系，每个响应式对象都有dep实例。dep.subs = watcher[]，当数据发生变更的时候通过dep.notify()通知各个watcher。</li>
<li>Watcher: 观察者对象，render watcher, computed watcher, user watcher</li>
</ol>
<ul>
<li>依赖收集</li>
</ul>
<ol>
<li>initState, 对computed属性初始化时，就会触发computed watcher依赖收集</li>
<li>initState, 对监听属性初始化时，触发user watcher依赖收集</li>
<li>render, 触发render watcher依赖收集</li>
</ol>
<ul>
<li>派发更新</li>
</ul>
<ol>
<li>组件中对响应的数据进行了修改，会触发setter逻辑</li>
<li>dep.notify()</li>
<li>遍历所有subs，调用每个watcher的update方法</li>
</ol>
<p>总结原理：当创建vue实例时，vue会遍历data里的属性，Object.defineProperty为属性添加getter和setter对数据的读取进行劫持。</p>
<p>getter: 依赖收集<br>setter: 派发更新</p>
<p>每个组件的实例都会有对应的watcher实例</p>
<h2 id="计算属性的实现原理"><a href="#计算属性的实现原理" class="headerlink" title="计算属性的实现原理"></a>计算属性的实现原理</h2><p>computed watcher, 计算属性的监听器</p>
<p>computed watcher 持有一个dep实例，通过dirty属性标记计算属性是否需要重新求值。</p>
<p>当computed的依赖值改变后，就会通知订阅的watcher进行更新，对于computed watcher会将dirty属性设置为true,并且进行计算属性方法的调用。</p>
<ol>
<li>computed 所谓的缓存是指什么？</li>
</ol>
<p>计算属性是基于它的响应式依赖进行缓存的，只有依赖发生改变的时候才会重新求值。</p>
<ol start="2">
<li>那computed缓存存在的意义是什么？或者你经常在什么时候使用？</li>
</ol>
<p>比如计算属性方法内部操作非常的耗时，遍历一个极大的数组，计算一次可能要耗时1s</p>
<p>类型转换，格式转换</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> largeArray = [</span><br><span class="line">    &#123;...&#125;,</span><br><span class="line">    &#123;...&#125;,</span><br><span class="line">] <span class="comment">// 10w</span></span><br><span class="line"></span><br><span class="line">data: &#123;</span><br><span class="line">    id: <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">computed: &#123;</span><br><span class="line">    currentItem: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> largeArray.find(<span class="function"><span class="params">item</span> =&gt;</span> item.id === <span class="keyword">this</span>.id)</span><br><span class="line">    &#125;</span><br><span class="line">    stringId: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">String</span>(<span class="keyword">this</span>.id)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>以下情况，computed可以监听到数据的变化吗？</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">template</span><br><span class="line">    &#123;&#123; storageMsg &#125;&#125;</span><br><span class="line"></span><br><span class="line">computed: &#123;</span><br><span class="line">    storageMsg: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sessionStorage.getItem(<span class="string">'xxx'</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    time: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Date</span>.now()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">created()&#123;</span><br><span class="line">    sessionStorage.setItem(<span class="string">'xxx'</span>, <span class="number">111</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">onClick()&#123;</span><br><span class="line">    sessionStorage.setItem(<span class="string">'xxx'</span>, <span class="built_in">Math</span>.random())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>答案：不会。</p>
<h2 id="Vue-nextTick的原理"><a href="#Vue-nextTick的原理" class="headerlink" title="Vue.nextTick的原理"></a>Vue.nextTick的原理</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Vue.nextTick(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// TODO</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">await</span> Vue.nextTick()</span><br><span class="line"><span class="comment">// TODO</span></span><br></pre></td></tr></table></figure>

<p>Vue是异步执行dom更新的，一旦观察到数据的变化，把同一个event loop中观察数据变化的watcher推送进这个队列。在下一次事件循环时，Vue清空异步队列，进行dom的更新</p>
<p>异步队列执行顺序<br>Promise.then -&gt; MutationObserver -&gt; setImmediate -&gt; setTimeout</p>
<p>vm.someData = ‘new value’, dom并不会马上更新，而是在异步队列被清除时才会更新dom.</p>
<p>事件循环执行顺序<br>宏任务 -&gt; 微任务队列 -&gt; UI render -&gt; 宏任务</p>
<p>一般什么时候会用到nextTick呢？</p>
<p>在数据变化后要执行某个操作，而这个操作依赖因你数据改变而改变的dom，这个操作就应该被放到vue.nextTick回调中。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div v-<span class="keyword">if</span>=<span class="string">"loaded"</span> ref=<span class="string">"test"</span>&gt;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> showDiv()&#123;</span><br><span class="line">    <span class="keyword">this</span>.loaded = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">await</span> Vue.nextTick();</span><br><span class="line">    <span class="keyword">this</span>.$refs.test.xxx(); <span class="comment">// 才能获取到ref</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="手写一个简单的vue-实现响应式更新"><a href="#手写一个简单的vue-实现响应式更新" class="headerlink" title="手写一个简单的vue, 实现响应式更新"></a>手写一个简单的vue, 实现响应式更新</h2><ol>
<li>新建一个目录</li>
</ol>
<ul>
<li>index.html 主页面</li>
<li>vue.js Vue主文件</li>
<li>compiler.js 编译模板，解析指令，v-model v-html</li>
<li>dep.js 收集依赖关系，存储观察者 // 以发布订阅的形式实现</li>
<li>observer.js 数据劫持</li>
<li>watcher.js 观察者对象类</li>
</ul>
<ol start="2">
<li>index.html</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"cn"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span>My Vue<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./index.js"</span> <span class="attr">type</span>=<span class="string">"module"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>初始化vue class, 新建vue.js</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 包括vue构造函数，接收各种配置参数等等</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Vue</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(options=&#123;&#125;)&#123;</span><br><span class="line">        <span class="keyword">this</span>.$options = options;</span><br><span class="line">        <span class="keyword">this</span>.$data = options.data;</span><br><span class="line">        <span class="keyword">this</span>.$methods = options.methods;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.initRootElement(options);</span><br><span class="line">        <span class="comment">// 利用Object.defineProperty将data的属性注入到vue实例中</span></span><br><span class="line">        <span class="keyword">this</span>._proxyData(<span class="keyword">this</span>.$data);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 获取更元素，并存储到vue实例。简单检查一下传入的el是否合规</span></span><br><span class="line">    initRootElement(options)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">typeof</span> options.el === <span class="string">'string'</span>)&#123;</span><br><span class="line">            <span class="keyword">this</span>.$el = <span class="built_in">document</span>.querySelector(options.el);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(options.el <span class="keyword">instanceof</span> HTMLElement)&#123;</span><br><span class="line">            <span class="keyword">this</span>.$el = options.el;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!<span class="keyword">this</span>.$el)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'传入的el不合法，请传入css selector或者HTMLElement'</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    _proxyData(data)&#123;</span><br><span class="line">        <span class="built_in">Object</span>.keys(data).forEach(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">Object</span>.defineProperty(<span class="keyword">this</span>, key, &#123;</span><br><span class="line">                enumerable: <span class="literal">true</span>,</span><br><span class="line">                configurable: <span class="literal">true</span>,</span><br><span class="line">                <span class="keyword">get</span>()&#123;</span><br><span class="line">                    <span class="keyword">return</span> data[key];</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="keyword">set</span>(newValue)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(data[key] === newValue)&#123;</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    data[key] = newValue</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>验证一下，新建index.js</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'./myvue/vue.js'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">'#app'</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        msg: <span class="string">'hello world'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        handle()&#123;</span><br><span class="line">            alert(<span class="number">111</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(vm)</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>vue里可以通过this来获取data里的属性</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>JS模块化</title>
    <url>/2022/01/02/JS%E6%A8%A1%E5%9D%97%E5%8C%96/</url>
    <content><![CDATA[<h1 id="好处"><a href="#好处" class="headerlink" title="好处"></a>好处</h1><ul>
<li>解决命名冲突</li>
<li>提供复用性</li>
<li>提高代码可维护性</li>
</ul>
<h1 id="立即执行函数"><a href="#立即执行函数" class="headerlink" title="立即执行函数"></a>立即执行函数</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">globalVariable</span>)</span>&#123;</span><br><span class="line">    globalVariable.test = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">    <span class="comment">// ...声明各种变量、函数都不会污染全局作用域</span></span><br><span class="line">&#125;)(globalVariable)</span><br></pre></td></tr></table></figure>

<h1 id="AMD和CMD"><a href="#AMD和CMD" class="headerlink" title="AMD和CMD"></a>AMD和CMD</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// AMD(require.js)</span></span><br><span class="line">define([<span class="string">'./a'</span>, <span class="string">'./b'</span>], <span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 加载完毕可以使用</span></span><br><span class="line">    a.do()</span><br><span class="line">    b.do()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// CMD(sea.js)</span></span><br><span class="line">define(<span class="function"><span class="keyword">function</span>(<span class="params">require, exports, module</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 可以把require写在函数体的任意地方实现延迟加载</span></span><br><span class="line">    <span class="keyword">var</span> a = <span class="built_in">require</span>(<span class="string">'./a'</span>)</span><br><span class="line">    a.do()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h1 id="CommonJS"><a href="#CommonJS" class="headerlink" title="CommonJS"></a>CommonJS</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入模块</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="comment">// 导出模块</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="function"><span class="params">()</span> =&gt;</span> &#123;&#125;</span><br><span class="line"><span class="built_in">module</span>.exports = path</span><br></pre></td></tr></table></figure>

<p>特点：</p>
<ul>
<li>require()是同步加载模块</li>
<li>是基于值的拷贝</li>
<li>node环境中默认使用CommonJS规范</li>
</ul>
<h1 id="ES-Module"><a href="#ES-Module" class="headerlink" title="ES Module"></a>ES Module</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入模块</span></span><br><span class="line"><span class="keyword">import</span> path <span class="keyword">from</span> <span class="string">'path'</span></span><br><span class="line"><span class="keyword">import</span> &#123; doSomeThing &#125; <span class="keyword">from</span> <span class="string">'path'</span></span><br><span class="line"><span class="comment">// 导出模块</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> doSomeThing = <span class="function"><span class="params">()</span> =&gt;</span> &#123;&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> path</span><br></pre></td></tr></table></figure>

<p>特点：</p>
<ul>
<li>import是异步加载模块</li>
<li>基于值的引用</li>
<li>ES Module会编译成 require/exports 来执行</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>Proxy</title>
    <url>/2022/01/02/Proxy/</url>
    <content><![CDATA[<h1 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> <span class="built_in">Proxy</span>(target, handler)</span><br></pre></td></tr></table></figure>

<h1 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h1><ol>
<li>target: 需要使用Proxy包装的目标对象（可以是任何类型的对象，包括原生数组、函数、甚至另一个代理）</li>
<li>handler: 一个对象，其属性是当执行一个操作时定义代理的行为的函数（可以理解为某种触发器）</li>
</ol>
<h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> xiaoming = &#123;</span><br><span class="line">    name: <span class="string">'小明'</span>,</span><br><span class="line">    age: <span class="number">30</span></span><br><span class="line">&#125;</span><br><span class="line">xiaoming = <span class="keyword">new</span> <span class="built_in">Proxy</span>(xiaoming, &#123;</span><br><span class="line">    <span class="keyword">get</span>(target, key)&#123;</span><br><span class="line">        <span class="keyword">let</span> result = target[key]</span><br><span class="line">        <span class="keyword">if</span>(key === <span class="string">'age'</span>) result += <span class="string">'岁'</span></span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">set</span>(target, key, value)&#123;</span><br><span class="line">        <span class="keyword">if</span>(key === <span class="string">'age'</span> &amp;&amp; <span class="keyword">typeof</span> value !== <span class="string">'number'</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="built_in">Error</span>(<span class="string">'age字段必须是number类型'</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Reflect</span>.set(target, key, value)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`我叫<span class="subst">$&#123;xiaoming.name&#125;</span> 我今年<span class="subst">$&#123;xiaoming.age&#125;</span>了`</span>) <span class="comment">// 我叫小明，我今年30岁了</span></span><br></pre></td></tr></table></figure>

<ol>
<li>首先创建了一个test对象，里面有name属性</li>
<li>然后使用Proxy将其包装起来，在返回给test</li>
<li>此时test已经成为了一个Proxy实例，我们对其的操作，都会被Proxy拦截</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>前端算法</title>
    <url>/2021/08/28/%E5%89%8D%E7%AB%AF%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<h2 id="排序算法"><a href="#排序算法" class="headerlink" title="排序算法"></a>排序算法</h2><h3 id="1-冒泡排序"><a href="#1-冒泡排序" class="headerlink" title="1. 冒泡排序"></a>1. 冒泡排序</h3><p><img src="/images/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F.gif" alt="冒泡排序"></p>
<p>普通版冒泡排序</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">BubbleSort</span>(<span class="params">array</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> len = array.length;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; len-i<span class="number">-1</span>; j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(array[j] &gt; array[j+<span class="number">1</span>])&#123;</span><br><span class="line">                [array[j], [array[j+<span class="number">1</span>]] = [array[j+<span class="number">1</span>], array[j]];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> array;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>优化版冒泡排序</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">BubbleSort</span>(<span class="params">originalArray</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> array = [...originalArray];</span><br><span class="line">    <span class="keyword">let</span> swapped;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; array.length; i++)&#123;</span><br><span class="line">        swapped = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; array.length - i - <span class="number">1</span>; j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(array[j] &gt; array[j+<span class="number">1</span>])&#123;</span><br><span class="line">                [array[j], array[j+<span class="number">1</span>]] = [array[j+<span class="number">1</span>], array[j]];</span><br><span class="line">                swapped = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(swapped)&#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> array;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-选择排序"><a href="#2-选择排序" class="headerlink" title="2. 选择排序"></a>2. 选择排序</h3><p><img src="/images/%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F.gif" alt="选择排序"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SelectionSort</span>(<span class="params">originalArray</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> array = [...originalArray];</span><br><span class="line">    <span class="keyword">let</span> len = array.length;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len - <span class="number">1</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">let</span> minIndex = i;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> j = i + <span class="number">1</span>; j &lt; len; j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(array[j] &lt; array[minIndex])&#123;</span><br><span class="line">                minIndex = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(minIndex !== i)&#123;</span><br><span class="line">            [array[minIndex], array[i]] = [array[i], array[minIndex]];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> array;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-插入排序"><a href="#3-插入排序" class="headerlink" title="3. 插入排序"></a>3. 插入排序</h3><p><img src="/images/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F.gif" alt="插入排序"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">InsertionSort</span>(<span class="params">originalArray</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> array = [...originalArray];</span><br><span class="line">    <span class="keyword">let</span> len = array.length;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len; i++)&#123;</span><br><span class="line">        <span class="keyword">let</span> temp = array[i]</span><br><span class="line">        <span class="keyword">let</span> j = i - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(j &gt;= <span class="number">0</span> &amp;&amp; array[j] &gt; temp)&#123;</span><br><span class="line">            array[j+<span class="number">1</span>] = array[j];</span><br><span class="line">            j--;</span><br><span class="line">        &#125;</span><br><span class="line">        array[j+<span class="number">1</span>] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> array;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-归并排序"><a href="#4-归并排序" class="headerlink" title="4. 归并排序"></a>4. 归并排序</h3><p><img src="/images/%E5%B9%B6%E5%BD%92%E6%8E%92%E5%BA%8F.gif" alt="并归排序"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MergeSort</span>(<span class="params">array</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> len = array.length;</span><br><span class="line">    <span class="keyword">if</span>(len &lt;= <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> array;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> num = <span class="built_in">Math</span>.floor(len / <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">let</span> left = MergeSort(array.slice(<span class="number">0</span>, num));</span><br><span class="line">    <span class="keyword">let</span> right = MergeSort(array.slice(num, len));</span><br><span class="line">    <span class="keyword">return</span> merge(left, right);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">merge</span>(<span class="params">left, right</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> [l, r] = [<span class="number">0</span>, <span class="number">0</span>];</span><br><span class="line">        <span class="keyword">let</span> result = [];</span><br><span class="line">        <span class="keyword">while</span>(l &lt; left.length &amp;&amp; r &lt; right.length)&#123;</span><br><span class="line">            <span class="keyword">if</span>(left[l] &lt; right[r])&#123;</span><br><span class="line">                result.push(left[l]);</span><br><span class="line">                l++;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                result.push(right[r]);</span><br><span class="line">                r++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        result = result.concat(left.slice(l, left.length));</span><br><span class="line">        result = result.concat(right.slice(r, right.length));</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">QuickSort</span>(<span class="params">array</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> len = array.length</span><br><span class="line">    <span class="keyword">if</span>(len &lt;= <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> array; <span class="comment">// 如果只有一个数，就直接返回</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> num = <span class="built_in">Math</span>.floor(len / <span class="number">2</span>); <span class="comment">// 找到中间数的索引值，如果是浮点数，则向下取整</span></span><br><span class="line">    <span class="keyword">let</span> numValue = array.splice(num, <span class="number">1</span>); <span class="comment">// 找到中间数的值</span></span><br><span class="line">    <span class="keyword">let</span> left = []</span><br><span class="line">    <span class="keyword">let</span> right = []</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(array[i] &lt; numValue)&#123;</span><br><span class="line">            left.push(array[i]) <span class="comment">// 基准点的左边数传到左边数组</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            right.push(array[i]) <span class="comment">// 基准点的右边数传到右边数组</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> QuickSort(left).concat([numValue, QuickSort(right)]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>Promise</title>
    <url>/2022/01/02/Promise/</url>
    <content><![CDATA[<h1 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h1><ol>
<li>三种状态：分别是等待中（pending）, 完成了（resolved）,拒绝了（rejected）</li>
<li>状态一旦从等待中变成其他状态就永远不能更改状态</li>
<li>状态一旦改变不可取消</li>
</ol>
<h1 id="实现一个简易版-Promise"><a href="#实现一个简易版-Promise" class="headerlink" title="实现一个简易版 Promise"></a>实现一个简易版 Promise</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> PENDING = <span class="string">'pending'</span></span><br><span class="line"><span class="keyword">const</span> RESOLVED = <span class="string">'resolved'</span></span><br><span class="line"><span class="keyword">const</span> REJECTED = <span class="string">'rejected'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MyPromise</span>(<span class="params">fn</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> that = <span class="keyword">this</span></span><br><span class="line">    that.state = PENDING</span><br><span class="line">    that.value = <span class="literal">null</span></span><br><span class="line">    that.resolvedCallbacks = []</span><br><span class="line">    that.rejectedCallbacks = []</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">resolve</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(that.state === PENDING)&#123;</span><br><span class="line">            that.state = RESOLVED</span><br><span class="line">            that.value = value</span><br><span class="line">            that.resolvedCallbacks.map(<span class="function"><span class="params">cb</span> =&gt;</span> cb(that.value))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">reject</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(that.state === PENDING)&#123;</span><br><span class="line">            that.state = REJECTED</span><br><span class="line">            that.value = value</span><br><span class="line">            that.rejectedCallbacks.map(<span class="function"><span class="params">cb</span> =&gt;</span> cb(that.value))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        fn(resolve, reject)</span><br><span class="line">    &#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line">        reject(e)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MyPromise.prototype.then = <span class="function"><span class="keyword">function</span>(<span class="params">onFulfilled, onRejected</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> that = <span class="keyword">this</span></span><br><span class="line">    onFulfilled = <span class="keyword">typeof</span> onFulfilled === <span class="string">'function'</span> ? onFulfilled : <span class="function"><span class="params">v</span> =&gt;</span> v</span><br><span class="line">    onRejected = <span class="keyword">typeof</span> onFulfilled === <span class="string">'function'</span> ? onRejected : <span class="function"><span class="params">err</span> =&gt;</span> &#123; <span class="keyword">throw</span> err &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(that.state === PENDING)&#123;</span><br><span class="line">        that.resolvedCallbacks.push(onFulfilled)</span><br><span class="line">        that.rejectedCallbacks.push(onRejected)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(that.state === RESOLVED)&#123;</span><br><span class="line">        onFulfilled(that.value)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(that.state === REJECTED)&#123;</span><br><span class="line">        onRejected(that.value)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> MyPromise(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        resolve(<span class="number">1</span>)</span><br><span class="line">    &#125;, <span class="number">0</span>)</span><br><span class="line">&#125;).then(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(value)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>算法知识</title>
    <url>/2021/09/12/%E7%AE%97%E6%B3%95%E7%9F%A5%E8%AF%86/</url>
    <content><![CDATA[<h2 id="数组展平（递归）"><a href="#数组展平（递归）" class="headerlink" title="数组展平（递归）"></a>数组展平（递归）</h2><p>展平一个数组，[[1,2],3,[[[4]],5]] =&gt; [1,2,3,4,5]</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">flatten</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> [].concat(</span><br><span class="line">        ...arr.map(<span class="function"><span class="params">x</span> =&gt;</span> <span class="built_in">Array</span>.isArray(x) ? flatten(x) : x)</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="函数节流"><a href="#函数节流" class="headerlink" title="函数节流"></a>函数节流</h2><p>document.addEventListener(‘scroll’, throttle(console.log(‘滚动了’)))<br>过滤掉重复的滚动事件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">fn, delay = <span class="number">60</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> lock = <span class="literal">false</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function">(<span class="params">...args</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(lock) <span class="keyword">return</span>;</span><br><span class="line">        fn(...args);</span><br><span class="line">        lock = <span class="literal">true</span>;</span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;lock = <span class="literal">false</span>&#125;, delay)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>过滤掉重复的验证事件（用户输入停止后300ms触发验证）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">fn, delay, timer = null</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function">(<span class="params">...args</span>) =&gt;</span> &#123;</span><br><span class="line">        clearInterval(timer)</span><br><span class="line">        timer = setTimeout(fn.bind(<span class="literal">null</span>, ...args), delay)</span><br><span class="line">        <span class="comment">// timer = setTimeout((...args) =&gt; fn(...args), delay)</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="柯里化"><a href="#柯里化" class="headerlink" title="柯里化"></a>柯里化</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> curry = <span class="function"><span class="params">func</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> g = <span class="function">(<span class="params">...allArgs</span>) =&gt;</span> allArgs.length &gt;= func.length ?</span><br><span class="line">        func(...allArgs) : <span class="function">(<span class="params">...args</span>) =&gt;</span> g(...allArgs, ...args);</span><br><span class="line">    <span class="keyword">return</span> g;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="重要的Math函数"><a href="#重要的Math函数" class="headerlink" title="重要的Math函数"></a>重要的Math函数</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Math</span>.abs 求绝对值</span><br><span class="line"><span class="built_in">Math</span>.ceil 向上取整</span><br><span class="line"><span class="built_in">Math</span>.floor 向下取整</span><br><span class="line"><span class="built_in">Math</span>.max 求最大值</span><br><span class="line"><span class="built_in">Math</span>.min 求最小值</span><br><span class="line"><span class="built_in">Math</span>.random <span class="number">0</span>~<span class="number">1</span>之间的随机数</span><br><span class="line"><span class="built_in">Math</span>.sqrt 平方根</span><br><span class="line"><span class="built_in">Math</span>.sign 求数值的符号</span><br><span class="line"><span class="built_in">Math</span>.pow 求幂</span><br></pre></td></tr></table></figure>

<h2 id="分页计算"><a href="#分页计算" class="headerlink" title="分页计算"></a>分页计算</h2><p>在一个分页表格中，给定每页显示条数（pageSize）和元素的序号（index）,求页码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> pageNo = <span class="built_in">Math</span>.ceil((index+<span class="number">1</span>)/pageSize)</span><br></pre></td></tr></table></figure>

<h2 id="数组最大值"><a href="#数组最大值" class="headerlink" title="数组最大值"></a>数组最大值</h2><p>const A = [1,2,3,4,5]</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> max = <span class="built_in">Math</span>.max(...A)</span><br></pre></td></tr></table></figure>

<h2 id="生成20-30的随机数"><a href="#生成20-30的随机数" class="headerlink" title="生成20~30的随机数"></a>生成20~30的随机数</h2><p>const min = 20, max = 30;</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Math</span>.round(min + <span class="built_in">Math</span>.random() * (max-min))</span><br></pre></td></tr></table></figure>

<h2 id="判断一个数是否时素数"><a href="#判断一个数是否时素数" class="headerlink" title="判断一个数是否时素数"></a>判断一个数是否时素数</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">is_prime</span>(<span class="params">n</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n &lt;= <span class="number">1</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">const</span> N = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.sqrt(n));</span><br><span class="line">    <span class="keyword">let</span> is_prime = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">2</span>; i &lt;= N; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(n % i === <span class="number">0</span>)&#123;</span><br><span class="line">            is_prime = <span class="literal">false</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> is_prime</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="数组相关操作"><a href="#数组相关操作" class="headerlink" title="数组相关操作"></a>数组相关操作</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Array</span>.length 长度  [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>].length -&gt; <span class="number">3</span></span><br><span class="line">indexOf 获取元素的序号  [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>].indexOf(<span class="number">2</span>) -&gt; <span class="number">2</span></span><br><span class="line"><span class="built_in">Array</span>.isArray 判断是否是数组 <span class="built_in">Array</span>.isArray([]) -&gt; <span class="literal">true</span></span><br><span class="line">forEach 遍历  </span><br><span class="line">push/pop/shift/unshift 入栈、出栈、入队、出队</span><br><span class="line">map 映射<span class="number">-1</span>对<span class="number">1</span>  [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>].map(<span class="function"><span class="params">x</span> =&gt;</span> x*<span class="number">2</span>) -&gt; [<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>]</span><br><span class="line">reduce 聚合-多对<span class="number">1</span>  [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>].map(<span class="function">(<span class="params">x, y</span>) =&gt;</span> x+y) -&gt; <span class="number">6</span></span><br><span class="line">filter 筛选  [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>].filter(<span class="function"><span class="params">x</span> =&gt;</span> x &gt; <span class="number">2</span>) -&gt; [<span class="number">3</span>]</span><br><span class="line"><span class="built_in">Array</span>.from 创建数组</span><br><span class="line">concat 合并数组  [<span class="number">1</span>,<span class="number">2</span>].concat([<span class="number">3</span>,<span class="number">4</span>]) -&gt; [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">slice  剪切</span><br><span class="line">splice 删除/插入/替换</span><br><span class="line">reduceRight 从右到左reduce</span><br><span class="line">sort 排序</span><br><span class="line">every 所有元素符合某个条件 [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>].every(<span class="function"><span class="params">x</span> =&gt;</span> x&gt;<span class="number">0</span>) -&gt; <span class="literal">true</span></span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>面向对象（OOP：Object Oriented Programming）</title>
    <url>/2021/06/19/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</url>
    <content><![CDATA[<h2 id="面向对象编程思想"><a href="#面向对象编程思想" class="headerlink" title="面向对象编程思想"></a>面向对象编程思想</h2><p>一：面向过程：注重解决问题的步骤，分析问题需要的每一步，实现函数依次调用；<br>二：面向对象：是一种程序设计的思想。将数据和处理数据的程序封装到对象中；<br>三：面向对象特性：抽象、继承、封装、多态；<br>四：面向对象优点：提高代码的复用性及维护性；</p>
<h2 id="对象的创建"><a href="#对象的创建" class="headerlink" title="对象的创建"></a>对象的创建</h2><h2 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h2><h2 id="new运算符"><a href="#new运算符" class="headerlink" title="new运算符"></a>new运算符</h2><h2 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h2><h2 id="原型prototype"><a href="#原型prototype" class="headerlink" title="原型prototype"></a>原型prototype</h2><h2 id="构造函数继承"><a href="#构造函数继承" class="headerlink" title="构造函数继承"></a>构造函数继承</h2><h2 id="原型的继承"><a href="#原型的继承" class="headerlink" title="原型的继承"></a>原型的继承</h2><h2 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h2><h2 id="包装对象"><a href="#包装对象" class="headerlink" title="包装对象"></a>包装对象</h2><h2 id="面向对象和面向过程编程"><a href="#面向对象和面向过程编程" class="headerlink" title="面向对象和面向过程编程"></a>面向对象和面向过程编程</h2><h2 id="类和对象概念"><a href="#类和对象概念" class="headerlink" title="类和对象概念"></a>类和对象概念</h2>]]></content>
  </entry>
  <entry>
    <title>面经</title>
    <url>/2022/01/03/%E9%9D%A2%E7%BB%8F/</url>
    <content><![CDATA[<h2 id="Class组件和函数组件的区别"><a href="#Class组件和函数组件的区别" class="headerlink" title="Class组件和函数组件的区别"></a>Class组件和函数组件的区别</h2><p><strong>Class组件</strong></p>
<ul>
<li>有组件实例</li>
<li>有生命周期</li>
<li>有state和setState</li>
</ul>
<p><strong>函数组件</strong></p>
<ul>
<li>没有组件实例</li>
<li>没有生命周期</li>
<li>没有state和setState，只能接收props</li>
<li>函数组件是一个纯函数，执行完立即销毁，无法存储state</li>
</ul>
<p><strong>Class组件存在的问题</strong></p>
<ul>
<li>大型组件很难拆分和重构，变得难以测试</li>
<li>相同业务逻辑分散到各个方法中，可能会变得混乱</li>
<li>复用逻辑可能变得复杂，比如 HOC、Render Props</li>
</ul>
<p>所以 react 中更提倡函数式编程，因为函数更灵活，更易拆分，但函数组件太简单，所以出现了hook，hook就是用来增强函数组件功能的。</p>
<h2 id="useState为什么不能放到条件语句里面？"><a href="#useState为什么不能放到条件语句里面？" class="headerlink" title="useState为什么不能放到条件语句里面？"></a>useState为什么不能放到条件语句里面？</h2><p>react通过单链表来管理hooks。update阶段，hooks函数执行的顺序是不变的，就可以根据这个链表拿到当前hooks对应的Hook对象。如果将useState写在条件判断中，可能会导致顺序错乱，导致当前hooks拿到的不是自己对应的Hook对象。</p>
<h2 id="实现一个Promise-all"><a href="#实现一个Promise-all" class="headerlink" title="实现一个Promise.all"></a>实现一个Promise.all</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">promiseAll</span>(<span class="params">promises</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolved, rejected</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> resultCount = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">let</span> results = <span class="keyword">new</span> <span class="built_in">Array</span>(promises.length);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; promises.length; i++)&#123;</span><br><span class="line">            promises[i].then(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">                resultCount++</span><br><span class="line">                results[i] = value</span><br><span class="line">                <span class="keyword">if</span>(resultCount === promises.length)&#123;</span><br><span class="line">                    <span class="keyword">return</span> resolved(results)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, error =&gt; &#123;</span><br><span class="line">                rejected(error)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="使用Redux的好处，以及和Mobx的区别"><a href="#使用Redux的好处，以及和Mobx的区别" class="headerlink" title="使用Redux的好处，以及和Mobx的区别"></a>使用Redux的好处，以及和Mobx的区别</h2><p><strong>Redux的三大优势：</strong></p>
<ol>
<li>单一数据源</li>
<li>状态是只读的</li>
<li>状态的改变只能通过纯函数改变</li>
</ol>
<p><strong>Redux和Mobx区别：</strong></p>
<ol>
<li>Redux将数据保存在单一的store中；而Mobx将数据保存在分散的多个store中</li>
<li>Redux使用简单对象保存数据，需要手动处理变化后的操作；Mobx使用observable保存数据，数据变化后自动处理响应的操作。</li>
<li>Redux使用的是不可变状态，意味着状态只是只读的，不能直接去修改它，而是应该通过纯函数改变返回一个新的状态；Mobx中的状态是可变的，可以直接对其进行修改</li>
<li>Redux比较复杂，因为其中的函数式编程思想掌握起来不是那么容易，同时需要借助一系列的中间件来处理异步和副作用；Mobx相对比较简单，在其中有很多的抽象，使用的更多是面向对象的思维</li>
<li>Redux提供可以进行时间回溯的开发工具，同时其纯函数以及更少的抽象，调试比较容易；Mobx中有更多的抽象和封装，调试起来比较复杂，同时结果也更难以预测</li>
</ol>
<h2 id="React-SSR是怎么实现的？"><a href="#React-SSR是怎么实现的？" class="headerlink" title="React SSR是怎么实现的？"></a>React SSR是怎么实现的？</h2><p>所谓同构，通俗的讲，就是一套 React 代码在服务器上运行一遍，到达浏览器又运行一遍。 服务端渲染完成页面结构，客户端渲染绑定事件。</p>
<ul>
<li>服务端执行流程：在服务端使用react-dom/server下的renderToString将React组件转化为string，拼接在html中进行返回。此时html中不包含元素对应的事件。打包时把react-dom下的hydrate的逻辑打包到js中，拼接在html中作为script标签返回，提供给客户端运行使用</li>
<li>浏览器执行流程：请求html，渲染html返回的页面内容并下载js文件，此时页面显示元素但不可交互，运行js中的ReactDom.hydrate给页面元素绑定事件，页面可交互。</li>
</ul>
<h2 id="有用过代码规范相关的吗？Eslint-和-Prettier-冲突怎么解决？"><a href="#有用过代码规范相关的吗？Eslint-和-Prettier-冲突怎么解决？" class="headerlink" title="有用过代码规范相关的吗？Eslint 和 Prettier 冲突怎么解决？"></a>有用过代码规范相关的吗？Eslint 和 Prettier 冲突怎么解决？</h2><p><a href="https://www.jianshu.com/p/b3a693cdcee9" target="_blank" rel="noopener">https://www.jianshu.com/p/b3a693cdcee9</a></p>
<h2 id="实现一个数组转树形结构的函数"><a href="#实现一个数组转树形结构的函数" class="headerlink" title="实现一个数组转树形结构的函数"></a>实现一个数组转树形结构的函数</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> data = [</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">text</span>: <span class="string">'t1'</span>, <span class="attr">parentId</span>: <span class="number">0</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">11</span>, <span class="attr">text</span>: <span class="string">'t11'</span>, <span class="attr">parentId</span>: <span class="number">1</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">12</span>, <span class="attr">text</span>: <span class="string">'t12'</span>, <span class="attr">parentId</span>: <span class="number">1</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">text</span>: <span class="string">'t2'</span>, <span class="attr">parentId</span>: <span class="number">0</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">21</span>, <span class="attr">text</span>: <span class="string">'t21'</span>, <span class="attr">parentId</span>: <span class="number">2</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">text</span>: <span class="string">'t3'</span>, <span class="attr">parentId</span>: <span class="number">0</span> &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">arrToTree</span>(<span class="params">data, id, parentId, children</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> cloneData = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(data))</span><br><span class="line">  <span class="keyword">return</span> cloneData.filter(<span class="function"><span class="params">father</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> newArr = cloneData.filter(<span class="function"><span class="params">child</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> father[id] === child[parentId]</span><br><span class="line">    &#125;)</span><br><span class="line">    father[children] = newArr</span><br><span class="line">    <span class="keyword">return</span> father[parentId] === <span class="number">0</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> treeData = arrToTree(data, <span class="string">'id'</span>, <span class="string">'parentId'</span>, <span class="string">'children'</span>)</span><br></pre></td></tr></table></figure>

<h2 id="React性能优化"><a href="#React性能优化" class="headerlink" title="React性能优化"></a>React性能优化</h2><ul>
<li><p>使用React.Memo来缓存组件</p>
<blockquote>
<p>提升应用程序性能的一种方法是实现memoization。Memoization是一种优化技术，主要通过存储昂贵的函数调用的结果，并在再次发生相同的输入时返回缓存的结果，以此来加速程序。父组件的每次状态更新，都会导致子组件重新渲染，即使传入子组件的状态没有变化，为了减少重复渲染，我们可以使用React.memo来缓存组件，这样只有当传入组件的状态值发生变化时才会重新渲染。如果传入相同的值，则返回缓存的组件。示例如下：</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> React.memo(<span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;&#123;props.value&#125;&lt;<span class="regexp">/div&gt;  </span></span><br><span class="line"><span class="regexp">  )</span></span><br><span class="line"><span class="regexp">&#125;);</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>使用useMemo缓存大量的计算</p>
<blockquote>
<p>有时渲染是不可避免的，但如果您的组件是一个功能组件，重新渲染会导致每次都调用大型计算函数，这是非常消耗性能的，我们可以使用新的useMemo钩子来“记忆”这个计算函数的计算结果。这样只有传入的参数发生变化后，该计算函数才会重新调用计算新的结果。通过这种方式，您可以使用从先前渲染计算的结果来挽救昂贵的计算耗时。总体目标是减少JavaScript在呈现组件期间必须执行的工作量，以便主线程被阻塞的时间更短。</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 避免这样做</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Component</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> someProp = heavyCalculation(props.item);</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">AnotherComponent</span> <span class="attr">someProp</span>=<span class="string">&#123;someProp&#125;</span> /&gt;</span></span> </span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="comment">// 只有 `props.item` 改变时someProp的值才会被重新计算</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Component</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> someProp = useMemo(<span class="function"><span class="params">()</span> =&gt;</span> heavyCalculation(props.item), [props.item]);</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">AnotherComponent</span> <span class="attr">someProp</span>=<span class="string">&#123;someProp&#125;</span> /&gt;</span></span> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>避免使用内联对象</p>
<blockquote>
<p>使用内联对象时，react会在每次渲染时重新创建对此对象的引用，这会导致接收此对象的组件将其视为不同的对象,因此，该组件对于prop的浅层比较始终返回false,导致组件一直重新渲染。许多人使用的内联样式的间接引用，就会使组件重新渲染，可能会导致性能问题。为了解决这个问题，我们可以保证该对象只初始化一次，指向相同引用。另外一种情况是传递一个对象，同样会在渲染时创建不同的引用，也有可能导致性能问题，我们可以利用ES6扩展运算符将传递的对象解构。这样组件接收到的便是基本类型的props，组件通过浅层比较发现接受的prop没有变化，则不会重新渲染。示例如下：</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Don't do this!</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Component</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> aProp = &#123; <span class="attr">someProp</span>: <span class="string">'someValue'</span> &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">AnotherComponent</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">margin:</span> <span class="attr">0</span> &#125;&#125; <span class="attr">aProp</span>=<span class="string">&#123;aProp&#125;</span> /&gt;</span></span>  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Do this instead :)</span></span><br><span class="line"><span class="keyword">const</span> styles = &#123; <span class="attr">margin</span>: <span class="number">0</span> &#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Component</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> aProp = &#123; <span class="attr">someProp</span>: <span class="string">'someValue'</span> &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">AnotherComponent</span> <span class="attr">style</span>=<span class="string">&#123;styles&#125;</span> &#123;<span class="attr">...aProp</span>&#125; /&gt;</span></span>  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>避免使用匿名函数</p>
<blockquote>
<p>虽然匿名函数是传递函数的好方法（特别是需要用另一个prop作为参数调用的函数），但它们在每次渲染上都有不同的引用。这类似于上面描述的内联对象。为了保持对作为prop传递给React组件的函数的相同引用，您可以将其声明为类方法（如果您使用的是基于类的组件）或使用useCallback钩子来帮助您保持相同的引用（如果您使用功能组件）。当然，有时内联匿名函数是最简单的方法，实际上并不会导致应用程序出现性能问题。这可能是因为在一个非常“轻量级”的组件上使用它，或者因为父组件实际上必须在每次props更改时重新渲染其所有内容。因此不用关心该函数是否是不同的引用，因为无论如何，组件都会重新渲染。</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 避免这样做</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Component</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">AnotherComponent</span> <span class="attr">onChange</span>=<span class="string">&#123;()</span> =&gt;</span> props.callback(props.id)&#125; /&gt;</span>  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 优化方法一</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Component</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> handleChange = useCallback(<span class="function"><span class="params">()</span> =&gt;</span> props.callback(props.id), [props.id]);</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">AnotherComponent</span> <span class="attr">onChange</span>=<span class="string">&#123;handleChange&#125;</span> /&gt;</span></span>  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 优化方法二</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Component</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  handleChange = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">   <span class="keyword">this</span>.props.callback(<span class="keyword">this</span>.props.id) </span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">AnotherComponent</span> <span class="attr">onChange</span>=<span class="string">&#123;this.handleChange&#125;</span> /&gt;</span></span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>延迟加载不是立即需要的组件</p>
<blockquote>
<p>延迟加载实际上不可见（或不是立即需要）的组件，React加载的组件越少，加载组件的速度就越快。因此，如果您的初始渲染感觉相当粗糙，则可以在初始安装完成后通过在需要时加载组件来减少加载的组件数量。同时，这将允许用户更快地加载您的平台/应用程序。最后，通过拆分初始渲染，您将JS工作负载拆分为较小的任务，这将为您的页面提供响应的时间。这可以使用新的React.Lazy和React.Suspense轻松完成。</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 延迟加载不是立即需要的组件</span></span><br><span class="line"><span class="keyword">const</span> MUITooltip = React.lazy(<span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'@material-ui/core/Tooltip'</span>));</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Tooltip</span>(<span class="params">&#123; children, title &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;React.Suspense fallback=&#123;children&#125;&gt;</span><br><span class="line">      &lt;MUITooltip title=&#123;title&#125;&gt;</span><br><span class="line">        &#123;children&#125;</span><br><span class="line">      &lt;<span class="regexp">/MUITooltip&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>React.Suspense&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Component</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;Tooltip title=&#123;props.title&#125;&gt;</span><br><span class="line">      &lt;AnotherComponent /&gt;</span><br><span class="line">    &lt;<span class="regexp">/Tooltip&gt;</span></span><br><span class="line"><span class="regexp">  )</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>调整CSS而不是强制组件加载和卸载</p>
<blockquote>
<p>渲染成本很高，尤其是在需要更改DOM时。每当你有某种手风琴或标签功能，例如想要一次只能看到一个项目时，你可能想要卸载不可见的组件，并在它变得可见时将其重新加载。如果加载/卸载的组件“很重”，则此操作可能非常消耗性能并可能导致延迟。在这些情况下，最好通过CSS隐藏它，同时将内容保存到DOM。尽管这种方法并不是万能的，因为安装这些组件可能会导致问题（即组件与窗口上的无限分页竞争），但我们应该选择在不是这种情况下使用调整CSS的方法。另外一点，将不透明度调整为0对浏览器的成本消耗几乎为0（因为它不会导致重排），并且应尽可能优先于更该visibility 和 display。有时在保持组件加载的同时通过CSS隐藏可能是有益的，而不是通过卸载来隐藏。对于具有显著的加载/卸载时序的重型组件而言，这是有效的性能优化手段。</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 避免对大型的组件频繁对加载和卸载</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Component</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [view, setView] = useState(<span class="string">'view1'</span>);</span><br><span class="line">  <span class="keyword">return</span> view === <span class="string">'view1'</span> ? <span class="xml"><span class="tag">&lt;<span class="name">SomeComponent</span> /&gt;</span></span> : <span class="xml"><span class="tag">&lt;<span class="name">AnotherComponent</span> /&gt;</span></span>  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用该方式提升性能和速度</span></span><br><span class="line"><span class="keyword">const</span> visibleStyles = &#123; <span class="attr">opacity</span>: <span class="number">1</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> hiddenStyles = &#123; <span class="attr">opacity</span>: <span class="number">0</span> &#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Component</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [view, setView] = useState(<span class="string">'view1'</span>);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;React.Fragment&gt;</span><br><span class="line">      &lt;SomeComponent style=&#123;view === <span class="string">'view1'</span> ? visibleStyles : hiddenStyles&#125;&gt;</span><br><span class="line">      &lt;AnotherComponent style=&#123;view !== <span class="string">'view1'</span> ? visibleStyles : hiddenStyles&#125;&gt;</span><br><span class="line">    &lt;<span class="regexp">/React.Fragment&gt;</span></span><br><span class="line"><span class="regexp">  )</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>使用React.Fragment避免添加额外的DOM</p>
</li>
<li><p>虚拟化长列表</p>
<blockquote>
<p>react-window 或 react-virtualized</p>
</blockquote>
</li>
<li><p>不可变数据</p>
<blockquote>
<p>Immer 或 immutability-helper</p>
</blockquote>
</li>
<li><p>使用生产版本</p>
</li>
</ul>
<h2 id="实现一个深拷贝"><a href="#实现一个深拷贝" class="headerlink" title="实现一个深拷贝"></a>实现一个深拷贝</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepClone</span>(<span class="params">obj</span>)</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">isObject</span>(<span class="params">o</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">typeof</span> o === <span class="string">'object'</span> || <span class="keyword">typeof</span> o === <span class="string">'function'</span>) &amp;&amp; o !== <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!isObject(obj))&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'非对象'</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> isArray = <span class="built_in">Array</span>.isArray(obj)</span><br><span class="line">    <span class="keyword">let</span> newObj = isArray ? [...obj] : &#123;...obj&#125;</span><br><span class="line">    <span class="built_in">Reflect</span>.ownKeys(newObj).forEach(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">        newObj[key] = isObject(obj[key]) ? deepClone(obj[key]) : obj[key]</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> newObj</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="微前端是怎么实现的？怎么独立部署？子应用通信怎么做？"><a href="#微前端是怎么实现的？怎么独立部署？子应用通信怎么做？" class="headerlink" title="微前端是怎么实现的？怎么独立部署？子应用通信怎么做？"></a>微前端是怎么实现的？怎么独立部署？子应用通信怎么做？</h2><h2 id="Webpack构建流程"><a href="#Webpack构建流程" class="headerlink" title="Webpack构建流程"></a>Webpack构建流程</h2><ol>
<li>初始化：启动构建，读取与合并配置参数，加载 Plugin，实例化 Compiler</li>
<li>编译：从 Entry 出发，针对每个 Module 串行调用对应的 Loader 去翻译文件的内容，再找到该 Module 依赖的 Module，递归地进行编译处理</li>
<li>输出：将编译后的 Module 组合成 Chunk，将 Chunk 转换成文件，输出到文件系统中</li>
</ol>
<p>在webpack运行的生命周期中会广播很多事件，plugin可以监听这些事件，在合适的时机通过webpack提供的api改变输出结果。</p>
<h2 id="Loader-和-Plugin-的原理和区别"><a href="#Loader-和-Plugin-的原理和区别" class="headerlink" title="Loader 和 Plugin 的原理和区别"></a>Loader 和 Plugin 的原理和区别</h2><ul>
<li>Loader用于对模块文件进行编译转换和加载处理，在module.rules数组中进行配置，它用于告诉Webpack在遇到哪些文件时使用哪些Loader去加载和转换。</li>
<li>Plugin用于扩展Webpack功能，实现原理是在构建流程里注入钩子函数，在合适的时机通过webpack提供的api改变输出结果。在plugins数组中进行配置。</li>
</ul>
<h2 id="webpack-怎么做分包？"><a href="#webpack-怎么做分包？" class="headerlink" title="webpack 怎么做分包？"></a>webpack 怎么做分包？</h2><h2 id="webpack-性能优化"><a href="#webpack-性能优化" class="headerlink" title="webpack 性能优化"></a>webpack 性能优化</h2><h2 id="react-diff的复杂度，以及react-diff的原理？"><a href="#react-diff的复杂度，以及react-diff的原理？" class="headerlink" title="react diff的复杂度，以及react diff的原理？"></a>react diff的复杂度，以及react diff的原理？</h2><h2 id="react-hooks的优缺点？"><a href="#react-hooks的优缺点？" class="headerlink" title="react hooks的优缺点？"></a>react hooks的优缺点？</h2><h2 id="从输入url到页面渲染经过了哪些步骤？"><a href="#从输入url到页面渲染经过了哪些步骤？" class="headerlink" title="从输入url到页面渲染经过了哪些步骤？"></a>从输入url到页面渲染经过了哪些步骤？</h2><h2 id="知道BFC吗？使用场景有哪些？"><a href="#知道BFC吗？使用场景有哪些？" class="headerlink" title="知道BFC吗？使用场景有哪些？"></a>知道BFC吗？使用场景有哪些？</h2><p>BFC 即 Block Formatting Contexts (块级格式化上下文)。<br>具有 BFC 特性的元素可以看作是隔离了的独立容器，容器里面的元素不会在布局上影响到外面的元素，并且 BFC 具有普通容器所没有的一些特性。通俗一点来讲，可以把 BFC 理解为一个封闭的大箱子，箱子内部的元素无论如何翻江倒海，都不会影响到外部。</p>
<h2 id="怎么判断是否是数组？"><a href="#怎么判断是否是数组？" class="headerlink" title="怎么判断是否是数组？"></a>怎么判断是否是数组？</h2><p><strong>用instanceof判断</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> a = [];</span><br><span class="line"><span class="built_in">console</span>.log(a <span class="keyword">instanceof</span> <span class="built_in">Array</span>); <span class="comment">//true</span></span><br></pre></td></tr></table></figure>

<p><strong>用Object的toString方法判断</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> a = [];</span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(a); <span class="comment">// "[object Array]"</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.apply(a); <span class="comment">// "[object Array]"</span></span><br></pre></td></tr></table></figure>

<p><strong>用Array对象的isArray方法判断</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> a = [];</span><br><span class="line"><span class="built_in">Array</span>.isArray(a); <span class="comment">//true</span></span><br></pre></td></tr></table></figure>

<h2 id="页面卡顿怎么去定位？"><a href="#页面卡顿怎么去定位？" class="headerlink" title="页面卡顿怎么去定位？"></a>页面卡顿怎么去定位？</h2><h2 id="数组有10万个数据，取第一个和取第10万个的耗时多久？"><a href="#数组有10万个数据，取第一个和取第10万个的耗时多久？" class="headerlink" title="数组有10万个数据，取第一个和取第10万个的耗时多久？"></a>数组有10万个数据，取第一个和取第10万个的耗时多久？</h2><h2 id="工作中遇到最难的问题？"><a href="#工作中遇到最难的问题？" class="headerlink" title="工作中遇到最难的问题？"></a>工作中遇到最难的问题？</h2><h2 id="防抖和节流"><a href="#防抖和节流" class="headerlink" title="防抖和节流"></a>防抖和节流</h2><p><strong>防抖定义</strong></p>
<p>防抖就是要延迟执行，你一直操作触发事件一直不执行，当你停止操作等待多少秒后才执行。</p>
<p>也就是说不管事件触发频率有多高，一定在事件触发 n 秒后执行。如果在事件触发的 n 秒又触发了这个事件，那就以新事件的事件为准，n 秒后才执行。总之，要等你触发完事件 n 秒内不再触发事件，它才执行。</p>
<p><strong>手写防抖</strong></p>
<blockquote>
<p>根据定义，我们知道要在时间 n 秒后执行，那么我们就用定时器来实现：</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">func, wait</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> timer = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">...args</span>)</span>&#123;</span><br><span class="line">        clearTimeout(timer);</span><br><span class="line">        timer = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            func.apply(<span class="keyword">this</span>, args)</span><br><span class="line">        &#125;, wait)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>代码很简单，即当还在触发事件时，就清除 timer，使其在 n 秒后执行，但此写法首次不会立即执行，为其健壮性，需加上判断是否第一次执行的第三个参数 flag，判断其是否立即执行。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">event, wait, flag</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> timer = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">...args</span>) </span>&#123;</span><br><span class="line">        clearTimeout(timer)</span><br><span class="line">        <span class="keyword">if</span> (!timer &amp;&amp; flag) &#123;</span><br><span class="line">            event.apply(<span class="keyword">this</span>, args)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            timer = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                event.apply(<span class="keyword">this</span>, args)</span><br><span class="line">            &#125;, wait)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>防抖场景</strong></p>
<p>窗口大小变化，调整样式</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'resize'</span>, debounce(handleResize, <span class="number">200</span>))</span><br></pre></td></tr></table></figure>

<p>搜索框，输入后300毫秒搜索</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">debounce(fetchSelectData, <span class="number">300</span>)</span><br></pre></td></tr></table></figure>

<p>表单验证，输入 1000 毫秒后验证</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">debounce(validator, <span class="number">1000</span>)</span><br></pre></td></tr></table></figure>

<p><strong>节流定义</strong><br>顾名思义，一节一节的流，就好似控制水阀，在事件不断触发的过程中，固定时间内执行一次事件。</p>
<p><strong>手写节流</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">func, wait</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> pre = <span class="number">0</span>, timer = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">...args</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">new</span> <span class="built_in">Date</span>() - pre &gt; wait) &#123;</span><br><span class="line">            clearTimeout(timer);</span><br><span class="line">            timer = <span class="literal">null</span>;</span><br><span class="line">            pre = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">            func.apply(<span class="keyword">this</span>, args)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            timer = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                func.apply(<span class="keyword">this</span>, args)</span><br><span class="line">            &#125;, wait)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>节流场景</strong></p>
<p>scroll 滚动</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'scroll'</span>, throttle(handleScroll, <span class="number">200</span>))</span><br></pre></td></tr></table></figure>

<p>input 动态搜索</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">throttle(fetchInput, <span class="number">300</span>)</span><br></pre></td></tr></table></figure>


<h2 id="http2的相关特性？"><a href="#http2的相关特性？" class="headerlink" title="http2的相关特性？"></a>http2的相关特性？</h2><ul>
<li>二进制分帧（HTTP/2 将请求和响应数据分割为更小的帧，并且它们采用二进制编码）</li>
<li>多路复用</li>
<li>服务器推送</li>
<li>头部压缩</li>
</ul>
<h2 id="viewport和移动端布局方案？"><a href="#viewport和移动端布局方案？" class="headerlink" title="viewport和移动端布局方案？"></a>viewport和移动端布局方案？</h2><h2 id="实现一个compose函数"><a href="#实现一个compose函数" class="headerlink" title="实现一个compose函数"></a>实现一个compose函数</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compose</span>(<span class="params">...fns</span>) </span>&#123; <span class="comment">// fns是传入的函数</span></span><br><span class="line">  <span class="keyword">const</span> fn = fns.pop();</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">...args</span>) =&gt;</span> &#123;</span><br><span class="line">    fn(...args);</span><br><span class="line">    <span class="keyword">if</span> (fns.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      compose(...fns);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="React-Fiber"><a href="#React-Fiber" class="headerlink" title="React Fiber?"></a>React Fiber?</h2><p>React内部实现的一套状态更新机制。支持任务不同优先级，可中断与恢复，并且恢复后可以复用之前的中间状态。</p>
<h2 id="怎么优化h5加载速度？怎么实现h5页面秒开？"><a href="#怎么优化h5加载速度？怎么实现h5页面秒开？" class="headerlink" title="怎么优化h5加载速度？怎么实现h5页面秒开？"></a>怎么优化h5加载速度？怎么实现h5页面秒开？</h2><p><a href="https://segmentfault.com/a/1190000041701111" target="_blank" rel="noopener">https://segmentfault.com/a/1190000041701111</a></p>
<h2 id="js-bridge通信原理？"><a href="#js-bridge通信原理？" class="headerlink" title="js bridge通信原理？"></a>js bridge通信原理？</h2><h2 id="useReducer比redux好在哪里？"><a href="#useReducer比redux好在哪里？" class="headerlink" title="useReducer比redux好在哪里？"></a>useReducer比redux好在哪里？</h2><h2 id="HTTP-和-HTTPS-的区别"><a href="#HTTP-和-HTTPS-的区别" class="headerlink" title="HTTP 和 HTTPS 的区别"></a>HTTP 和 HTTPS 的区别</h2><p><a href="https://www.51cto.com/article/701195.html" target="_blank" rel="noopener">https://www.51cto.com/article/701195.html</a></p>
<h2 id="HTTP-常见的状态码"><a href="#HTTP-常见的状态码" class="headerlink" title="HTTP 常见的状态码"></a>HTTP 常见的状态码</h2><p>1 表示消息<br>2 表示成功<br>3 表示重定向<br>4 表示请求错误<br>5 表示服务器错误</p>
<p><strong>1xx（代表请求已被接受，需要继续处理。这类响应是临时响应，只包含状态行和某些可选的响应头信息，并以空行结束）</strong></p>
<ul>
<li>100（客户端继续发送请求，这是临时响应）：这个临时响应是用来通知客户端它的部分请求已经被服务器接收，且仍未被拒绝。客户端应当继续发送请求的剩余部分，或者如果请求已经完成，忽略这个响应。服务器必须在请求完成后向客户端发送一个最终响应</li>
<li>101：服务器根据客户端的请求切换协议，主要用于websocket或http2升级</li>
</ul>
<p><strong>2xx（代表请求已成功被服务器接收、理解、并接受）</strong></p>
<ul>
<li>200（成功）：请求已成功，请求所希望的响应头或数据体将随此响应返回</li>
<li>204（无内容）：服务器成功处理请求，但没有返回任何内容</li>
</ul>
<p><strong>3xx（表示要完成请求，需要进一步操作。 通常，这些状态代码用来重定向）</strong></p>
<ul>
<li>301（永久移动）：请求的网页已永久移动到新位置。 服务器返回此响应（对 GET 或 HEAD 请求的响应）时，会自动将请求者转到新位置</li>
<li>302（临时移动）： 服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求</li>
<li>304：协商缓存，告诉客户端有缓存，直接使用缓存中的数据，返回页面的只有头部信息，是没有内容部分</li>
</ul>
<p><strong>4xx（代表了客户端看起来可能发生了错误，妨碍了服务器的处理）</strong></p>
<ul>
<li>400（错误请求）： 服务器不理解请求的语法</li>
<li>401（未授权）： 请求要求身份验证。 对于需要登录的网页，服务器可能返回此响应</li>
<li>403（禁止）： 服务器拒绝请求</li>
<li>404（未找到）： 服务器找不到请求的网页</li>
<li>405（方法禁用）： 禁用请求中指定的方法</li>
<li>408（请求超时）： 服务器等候请求时发生超时</li>
</ul>
<p><strong>5xx（表示服务器无法完成明显有效的请求。这类状态码代表了服务器在处理请求的过程中有错误或者异常状态发生）</strong></p>
<ul>
<li>500（服务器内部错误）：服务器遇到错误，无法完成请求</li>
<li>501（尚未实施）：服务器不具备完成请求的功能。 例如，服务器无法识别请求方法时可能会返回此代码</li>
<li>502（错误网关）： 服务器作为网关或代理，从上游服务器收到无效响应</li>
<li>503（服务不可用）： 服务器目前无法使用（由于超载或停机维护）</li>
<li>504（网关超时）： 服务器作为网关或代理，但是没有及时从上游服务器收到请求</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>浏览器缓存机制</title>
    <url>/2021/12/27/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<h1 id="缓存位置"><a href="#缓存位置" class="headerlink" title="缓存位置"></a>缓存位置</h1><p>从缓存位置上来说分为四种，并且各自有优先级，当依次查找缓存且都没有命中的时候，才会去请求网络</p>
<h2 id="Service-Worker"><a href="#Service-Worker" class="headerlink" title="Service Worker"></a>Service Worker</h2><blockquote>
<p>Service Worker 是运行在浏览器背后的独立线程，一般可以用来实现缓存功能。</p>
</blockquote>
<h2 id="Memory-Cache"><a href="#Memory-Cache" class="headerlink" title="Memory Cache"></a>Memory Cache</h2><blockquote>
<p>Memory Cache 也就是内存中的缓存，读取内存中的数据肯定比磁盘快。</p>
</blockquote>
<h2 id="Disk-Cache"><a href="#Disk-Cache" class="headerlink" title="Disk Cache"></a>Disk Cache</h2><blockquote>
<p>Disk Cache 也就是存储在硬盘中的缓存，读取速度慢点，但是什么都能存储到磁盘中，比之 Memory Cache 胜在容量和存储时效性上。</p>
</blockquote>
<h2 id="Push-Cache"><a href="#Push-Cache" class="headerlink" title="Push Cache"></a>Push Cache</h2><blockquote>
<p>Push Cache 是 HTTP/2 中的内容，当以上三种缓存都没有命中时，它才会被使用。并且缓存时间也很短暂，只在会话（Session）中存在，一旦会话结束就被释放。</p>
</blockquote>
<h1 id="缓存策略"><a href="#缓存策略" class="headerlink" title="缓存策略"></a>缓存策略</h1><h2 id="强缓存"><a href="#强缓存" class="headerlink" title="强缓存"></a>强缓存</h2><ul>
<li><p>Expires</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Expires: Wed, <span class="number">22</span> Oct <span class="number">2018</span> <span class="number">08</span>:<span class="number">41</span>:<span class="number">00</span> GMT</span><br></pre></td></tr></table></figure>
<p>Expires 是 HTTP/1 的产物，表示资源会在 Wed, 22 Oct 2018 08:41:00 GMT 后过期，需要再次请求。并且 Expires 受限于本地时间，如果修改了本地时间，可能会造成缓存失效。</p>
</li>
<li><p>Cache-Control</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Cache-control: max-age=<span class="number">30</span></span><br></pre></td></tr></table></figure>
<p>Cache-Control 出现于 HTTP/1.1，优先级高于 Expires 。该属性值表示资源会在 30 秒后过期，需要再次请求。</p>
</li>
</ul>
<h2 id="协商缓存"><a href="#协商缓存" class="headerlink" title="协商缓存"></a>协商缓存</h2><ul>
<li>Last-Modified 和 If-Modified-Since<br>Last-Modified 表示本地文件最后修改日期，If-Modified-Since 会将 Last-Modified 的值发送给服务器，询问服务器在该日期后资源是否有更新，有更新的话就会将新的资源发送回来，否则返回 304 状态码。</li>
</ul>
<p>但是 Last-Modified 存在一些弊端：</p>
<ul>
<li>如果本地打开缓存文件，即使没有对文件进行修改，但还是会造成 Last-Modified 被修改，服务端不能命中缓存导致发送相同的资源</li>
<li>因为 Last-Modified 只能以秒计时，如果在不可感知的时间内修改完成文件，那么服务端会认为资源还是命中了，不会返回正确的资源</li>
</ul>
<p>因为以上这些弊端，所以在 HTTP / 1.1 出现了 ETag 。</p>
<ul>
<li>ETag 和 If-None-Match<br>ETag 类似于文件指纹，If-None-Match 会将当前 ETag 发送给服务器，询问该资源 ETag 是否变动，有变动的话就将新的资源发送回来。并且 ETag 优先级比 Last-Modified 高。</li>
</ul>
<h1 id="实际场景应用缓存策略"><a href="#实际场景应用缓存策略" class="headerlink" title="实际场景应用缓存策略"></a>实际场景应用缓存策略</h1><h2 id="频繁变动的资源"><a href="#频繁变动的资源" class="headerlink" title="频繁变动的资源"></a>频繁变动的资源</h2><p>对于频繁变动的资源，首先需要使用 Cache-Control: no-cache 使浏览器每次都请求服务器，然后配合 ETag 或者 Last-Modified 来验证资源是否有效。这样的做法虽然不能节省请求数量，但是能显著减少响应数据大小。</p>
<h2 id="代码文件"><a href="#代码文件" class="headerlink" title="代码文件"></a>代码文件</h2><p>这里特指除了 HTML 外的代码文件，因为 HTML 文件一般不缓存或者缓存时间很短。</p>
<p>一般来说，现在都会使用工具来打包代码，那么我们就可以对文件名进行哈希处理，只有当代码修改后才会生成新的文件名。基于此，我们就可以给代码文件设置缓存有效期一年 Cache-Control: max-age=31536000，这样只有当 HTML 文件中引入的文件名发生了改变才会去下载最新的代码文件，否则就一直使用缓存。</p>
]]></content>
  </entry>
  <entry>
    <title>JS基础</title>
    <url>/2021/12/25/JS%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h1 id="原始数据类型"><a href="#原始数据类型" class="headerlink" title="原始数据类型"></a>原始数据类型</h1><ul>
<li>boolean</li>
<li>null</li>
<li>undefined</li>
<li>null</li>
<li>string</li>
<li>symbol</li>
</ul>
<p>注意：<br>1、原始类型存储的都是值，是没有函数可以调用的<br>2、typeof null输出object，这是JS存在的一个悠久Bug</p>
<h1 id="对象类型"><a href="#对象类型" class="headerlink" title="对象类型"></a>对象类型</h1><p>在JS中，除了原始类型，其他都是对象类型。对象类型和原始类型不同的是，原始类型存储的是值，对象类型存储的是地址（指针）。当你创建了一个对象类型的时候，计算机会在内存中开辟一个空间来存放值，但是我们需要找到这个空间，这个空间会拥有一个地址（指针）。</p>
<h1 id="typeof-vs-instanceof"><a href="#typeof-vs-instanceof" class="headerlink" title="typeof vs instanceof"></a>typeof vs instanceof</h1><h2 id="typeof"><a href="#typeof" class="headerlink" title="typeof"></a>typeof</h2><p>typeof 对于原始类型来说，除了null都是可以显示正确的类型</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typeof</span> <span class="number">1</span> <span class="comment">// 'number'</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="string">'1'</span> <span class="comment">// 'string'</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="literal">undefined</span> <span class="comment">// 'undefined'</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="literal">true</span> <span class="comment">// 'boolean'</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="built_in">Symbol</span> <span class="comment">// 'symbol'</span></span><br></pre></td></tr></table></figure>

<p>typeof 对于对象来说，除了函数都会显示object，所以 typeof 并不能准确判断变量到底是什么类型</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typeof</span> [] <span class="comment">// 'object'</span></span><br><span class="line"><span class="keyword">typeof</span> &#123;&#125; <span class="comment">// 'object'</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="built_in">console</span>.log <span class="comment">// 'function'</span></span><br></pre></td></tr></table></figure>

<h2 id="instanceof"><a href="#instanceof" class="headerlink" title="instanceof"></a>instanceof</h2><p>如果我们想判断一个对象的正确类型，这时候可以考虑使用 instanceof,因为内部机制是通过原型链来判断的</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> Person = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> Person()</span><br><span class="line">p1 <span class="keyword">instanceof</span> Person <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">'hello world'</span></span><br><span class="line">str <span class="keyword">instanceof</span> <span class="built_in">String</span> <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str1 = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">'hello world'</span>)</span><br><span class="line">str1 <span class="keyword">instanceof</span> <span class="built_in">String</span> <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p>对于原始类型来说，想直接通过 instanceof 来判断是不行的，当然我们还是有办法让 instanceof 判断原始类型的</p>
<h1 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h1><h1 id="this"><a href="#this" class="headerlink" title="this"></a>this</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.a)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span></span><br><span class="line">foo()</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    a: <span class="number">2</span>,</span><br><span class="line">    foo: foo</span><br><span class="line">&#125;</span><br><span class="line">obj.foo()</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> c = <span class="keyword">new</span> foo()</span><br></pre></td></tr></table></figure>
<ul>
<li>对于直接调用foo来说，不管foo函数被放在了什么地方，this一定是window</li>
<li>对于obj.foo()来说，谁调用了函数，谁就是this，所以在这个场景下foo函数中this就是obj对象</li>
<li>对于new方式来说，this被永远绑定在了c上面，不会被任何方式改变this</li>
</ul>
<p>箭头函数中的this</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(a()())</span><br></pre></td></tr></table></figure>
<p>箭头函数是没有this的，箭头函数中的this只取决包裹箭头函数的第一个普通函数的this。在这个例子中，因为包裹箭头函数的第一个普通函数是a，所以此时的this是window。另外对箭头函数使用bind这类函数是无效的。</p>
<p>最后这种情况就是bind这些改变上下文的API了，对于这些函数来说，this取决于第一个参数，如果第一个参数为空，那么就是window。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = &#123;&#125;</span><br><span class="line"><span class="keyword">let</span> fn = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="built_in">console</span>.log(<span class="keyword">this</span>) &#125;</span><br><span class="line">fn.bind().bind(a) <span class="comment">// window</span></span><br></pre></td></tr></table></figure>
<p>可以从上述代码中发现，不管我们给函数bind几次，fn中的this永远由第一次bind决定，所以结果永远是widnow。</p>
<p>以上就是this的规则了，但是可能会发生多个规则同事出现的情况，这时候不同的规则之间会根据优先级最高的来决定this最终指向哪里。</p>
<p>new —&gt; bind —&gt; obj.foo() -&gt; foo()</p>
<h1 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h1><p>闭包的定义：函数A内部有个函数B，函数B可以访问函数A中的变量，那么函数B就是闭包</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">A</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> a = <span class="number">1</span></span><br><span class="line">    <span class="built_in">window</span>.B = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(a)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">A()</span><br><span class="line">B() <span class="comment">// 1</span></span><br></pre></td></tr></table></figure>
<p>在JS中，闭包存在的意义就是让我们可以间接访问函数内部的变量。</p>
<p>经典面试题，循环中使用闭包解决<code>var</code>定义函数的问题</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i &lt;= <span class="number">5</span>; i++)&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span> <span class="title">timer</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(i)</span><br><span class="line">    &#125;, i * <span class="number">1000</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>首先因为setTimeout是个异步函数，所以会等循环全部执行完毕，这时候i就是6了，所以会输出一堆6。</p>
<p>解决办法有三种，第一种是使用闭包方式</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt;= <span class="number">5</span>; i++)&#123;</span><br><span class="line">    ;(<span class="function"><span class="keyword">function</span>(<span class="params">j</span>)</span>&#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="keyword">function</span> <span class="title">timer</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(j)</span><br><span class="line">        &#125;, j * <span class="number">1000</span>)</span><br><span class="line">    &#125;)(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在上述代码中，首先使用了立即执行函数将传入函数内部，这时候值就被固定在了参数j上面不会改变，当下次执行timer这个闭包的时候，就可以使用外部函数的变量j，从而达到母的。</p>
<p>第二种就是使用setTimeout的第三个参数，这个参数会被当成timer函数的参数传入。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++)&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span> <span class="title">timer</span>(<span class="params">j</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(j)</span><br><span class="line">    &#125;, i * <span class="number">1000</span>, i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>第三种就是使用let定义i来解决问题，这个也是最为推荐的方式。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt;= <span class="number">5</span>; i++)&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span> <span class="title">timer</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(i)</span><br><span class="line">    &#125;, i * <span class="number">1000</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="深浅拷贝"><a href="#深浅拷贝" class="headerlink" title="深浅拷贝"></a>深浅拷贝</h1><p>我们了解了对象在赋值的过程中其实是复制了地址，从而会导致改变了一方其他也都被改变的情况。通常在开发过程中我们不希望出现这样的情况，我们可以使用浅拷贝来解决这个情况。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = &#123;</span><br><span class="line">    age: <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> b = a</span><br><span class="line">a.age = <span class="number">2</span></span><br><span class="line"><span class="built_in">console</span>.log(b.age) <span class="comment">// 2</span></span><br></pre></td></tr></table></figure>

<h2 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h2><h3 id="Object-assign"><a href="#Object-assign" class="headerlink" title="Object.assign"></a>Object.assign</h3><blockquote>
<p>只会拷贝所有的属性值到新的对象中，如果属性值是对象的话，拷贝的是地址，所以并不是深拷贝</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = &#123;</span><br><span class="line">    age: <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> b = <span class="built_in">Object</span>.assign(&#123;&#125;, a)</span><br><span class="line">a.age = <span class="number">2</span></span><br><span class="line"><span class="built_in">console</span>.log(b.age) <span class="comment">// 1</span></span><br></pre></td></tr></table></figure>

<h3 id="展开运算符（…）"><a href="#展开运算符（…）" class="headerlink" title="展开运算符（…）"></a>展开运算符（…）</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = &#123;</span><br><span class="line">    age: <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> b = &#123;...a&#125;</span><br><span class="line">a.age = <span class="number">2</span></span><br><span class="line"><span class="built_in">console</span>.log(b.age) <span class="comment">// 1</span></span><br></pre></td></tr></table></figure>

<p>通常浅拷贝就能解决大部分问题了，但是当我们遇到如下情况就可能需要使用到深拷贝了</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = &#123;</span><br><span class="line">    age: <span class="number">1</span>,</span><br><span class="line">    jobs: &#123;</span><br><span class="line">        first: <span class="string">'FE'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> b = &#123;...a&#125;</span><br><span class="line">a.jobs.first = <span class="string">'native'</span></span><br><span class="line"><span class="built_in">console</span>.log(b.jobs.first) <span class="comment">// native</span></span><br></pre></td></tr></table></figure>
<p>浅拷贝只解决了第一层的问题，如果接下去的值还有对象的话，那么就又回到最开始的话题了，两者享有相同的地址。要解决这个问题，我们就得使用深拷贝了。</p>
<h2 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h2><p>这个问题通常可以通过JSON.parse(JSON.stringify(object))来解决</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = &#123;</span><br><span class="line">    age: <span class="number">1</span>,</span><br><span class="line">    jobs: &#123;</span><br><span class="line">        first: <span class="string">'FE'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> b = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(a))</span><br><span class="line">a.jobs.first = <span class="string">'native'</span></span><br><span class="line"><span class="built_in">console</span>.log(b.jobs.first) <span class="comment">// FE</span></span><br></pre></td></tr></table></figure>

<p>但是该方法也是有局限性的：</p>
<ul>
<li>会忽略undefined</li>
<li>会忽略symbol</li>
<li>不能序列化函数</li>
<li>不能解决循环引用的对象</li>
</ul>
<p>在遇到函数、undefined或者symbol的时候，该对象也不能正常的序列化</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = &#123;</span><br><span class="line">    age: <span class="literal">undefined</span>,</span><br><span class="line">    sex: <span class="built_in">Symbol</span>(<span class="string">'male'</span>),</span><br><span class="line">    jobs: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;,</span><br><span class="line">    name: <span class="string">'zhj'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> b = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(a))</span><br><span class="line"><span class="built_in">console</span>.log(b) <span class="comment">// &#123;name: 'zhj'&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="手写实现简易版深拷贝"><a href="#手写实现简易版深拷贝" class="headerlink" title="手写实现简易版深拷贝"></a>手写实现简易版深拷贝</h2><blockquote>
<p>实现一个深拷贝是很困难的，需要我们考虑好多种边界情况，比如原型链如何处理、DOM如何处理等等，推荐使用lodash深拷贝函数</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepClone</span>(<span class="params">obj</span>)</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">isObject</span>(<span class="params">o</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">typeof</span> o === <span class="string">'object'</span> || <span class="keyword">typeof</span> o === <span class="string">'function'</span>) &amp;&amp; o !== <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!isObject(obj))&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'非对象'</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> isArray = <span class="built_in">Array</span>.isArray(obj)</span><br><span class="line">    <span class="keyword">let</span> newObj = isArray ? [...obj] : &#123;...obj&#125;</span><br><span class="line">    <span class="built_in">Reflect</span>.ownKeys(newObj).forEach(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">        newObj[key] = isObject(obj[key]) ? deepClone(obj[key]) : obj[key]</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> newObj</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    a: [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],</span><br><span class="line">    b: &#123;</span><br><span class="line">        c: <span class="number">2</span>,</span><br><span class="line">        d: <span class="number">3</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> newObj = deepClone(obj)</span><br><span class="line">newObj.b.c = <span class="number">1</span></span><br><span class="line"><span class="built_in">console</span>.log(obj.b.c) <span class="comment">// 2</span></span><br></pre></td></tr></table></figure>

<h1 id="原型和原型链"><a href="#原型和原型链" class="headerlink" title="原型和原型链"></a>原型和原型链</h1><p>每个实例对象都有一个私有属性<strong>proto</strong>，指向它的构造函数的原型对象（prototype）。原型对象也有自己的<strong>proto</strong>，层层向上直到一个对象的原型对象为null。这一层层原型就是原型链。</p>
<h1 id="继承（原型继承和Class继承）"><a href="#继承（原型继承和Class继承）" class="headerlink" title="继承（原型继承和Class继承）"></a>继承（原型继承和Class继承）</h1><h2 id="组合继承"><a href="#组合继承" class="headerlink" title="组合继承"></a>组合继承</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.val = value</span><br><span class="line">&#125;</span><br><span class="line">Parent.prototype.getValue = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.val)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">    Parent.call(<span class="keyword">this</span>, value)</span><br><span class="line">&#125;</span><br><span class="line">Child.prototype = <span class="keyword">new</span> Parent()</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> child = <span class="keyword">new</span> Child(<span class="number">1</span>)</span><br><span class="line"><span class="built_in">console</span>.log(child.getValue()) <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(child <span class="keyword">instanceof</span> Parent) <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p>原理：<br>1、子类的构造函数中通过Parent.call(this)继承父类中的属性<br>2、改变子类的原型为new Parent()类继承父类中的函数</p>
<p>优点：<br>1、构造函数可以传参，不会与父类引用属性共享<br>2、可以复用父类的函数</p>
<p>缺点：继承父类函数的时候调用了父类构造函数，导致子类的原型上多了不需要的父类属性，存在内存上的浪费。</p>
<h2 id="寄生组合继承"><a href="#寄生组合继承" class="headerlink" title="寄生组合继承"></a>寄生组合继承</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.val = value</span><br><span class="line">&#125;</span><br><span class="line">Parent.prototype.getValue = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.val)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">    Parent.call(<span class="keyword">this</span>, value)</span><br><span class="line">&#125;</span><br><span class="line">Child.prototype = <span class="built_in">Object</span>.create(Parent.prototype, &#123;</span><br><span class="line">    <span class="keyword">constructor</span>: &#123;</span><br><span class="line">        value: Child,</span><br><span class="line">        enumerable: <span class="literal">false</span>,</span><br><span class="line">        writable: <span class="literal">true</span>,</span><br><span class="line">        configurable: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> child = <span class="keyword">new</span> Child(<span class="number">1</span>)</span><br><span class="line"><span class="built_in">console</span>.log(child.getValue()) <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(child <span class="keyword">instanceof</span> Parent) <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p>原理：<br>1、将父类的原型赋值给了子类<br>2、将构造函数设置为子类</p>
<p>优点：<br>1、解决了无用的父类属性问题<br>2、还能正确找到子类的构造函数</p>
<h2 id="Class-继承"><a href="#Class-继承" class="headerlink" title="Class 继承"></a>Class 继承</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(value)&#123;</span><br><span class="line">        <span class="keyword">this</span>.val = value</span><br><span class="line">    &#125;</span><br><span class="line">    getValue()&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.val)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> <span class="keyword">extends</span> <span class="title">Parent</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(value)&#123;</span><br><span class="line">        <span class="keyword">super</span>(value)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> child = <span class="keyword">new</span> Child(<span class="number">1</span>)</span><br><span class="line"><span class="built_in">console</span>.log(child.getValue()) <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(child <span class="keyword">instanceof</span> Parent) <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
</search>
